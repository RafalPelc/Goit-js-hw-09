{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAaL,SAASC,cAAc,kBACpCK,EAAYN,SAASC,cAAc,iBACnCM,EAAcP,SAASC,cAAc,mBAErCO,EAAQC,SAASJ,EAAWK,OAC5BC,EAAOF,SAASH,EAAUI,OAC1BE,EAASH,SAASF,EAAYG,QAqBtC,SAAwBG,EAAYF,EAAMC,GACxC,IAAIE,EAAeD,EACfE,EAAW,GAEf,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAQI,IAC3BD,EAASE,KAAKC,EAAcF,EAAGF,IAC/BA,GAAgBH,EAGlB,OAAOQ,QAAQC,IAAIL,E,EA5BnBM,CAAeb,EAAOG,EAAMC,GACzBU,MAAKC,IACJA,EAAQC,SAAQC,IACVA,EAAOC,cACTC,EAAA7B,GAAS8B,OAAOC,QACd,uBAAqBJ,EAAIK,eAAoBL,EAAEjB,WAGjDmB,EAAA7B,GAAS8B,OAAOG,QACd,sBAAoBN,EAAIK,eAAoBL,EAAEjB,UAAe,GAGjE,IAEHwB,OAAMC,IACLC,QAAQD,MAAM,QAASA,EAAM,G,IAgBnC,MAAMf,EAAgB,CAACY,EAAUtB,IACxB,IAAIW,SAAQgB,IACjBC,YAAW,KACT,MAAMV,EAAgBW,KAAKC,SAAW,GACtCH,EAAQ,C,SAAEL,E,MAAUtB,E,cAAOkB,GAAgB,GAC1ClB,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delayInput = document.querySelector('[name=\"delay\"]');\n  const stepInput = document.querySelector('[name=\"step\"]');\n  const amountInput = document.querySelector('[name=\"amount\"]');\n\n  const delay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  createPromises(delay, step, amount)\n    .then(results => {\n      results.forEach(result => {\n        if (result.shouldResolve) {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${result.position} in ${result.delay}ms`\n          );\n        } else {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${result.position} in ${result.delay}ms`\n          );\n        }\n      });\n    })\n    .catch(error => {\n      console.error('Błąd:', error);\n    });\n}\n\nfunction createPromises(firstDelay, step, amount) {\n  let currentDelay = firstDelay;\n  let promises = [];\n\n  for (let i = 1; i <= amount; i++) {\n    promises.push(createPromise(i, currentDelay));\n    currentDelay += step;\n  }\n\n  return Promise.all(promises);\n}\n\nconst createPromise = (position, delay) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      resolve({ position, delay, shouldResolve });\n    }, delay);\n  });\n};\n"],"names":["$7Y9D8","parcelRequire","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","delay","parseInt","value","step","amount","firstDelay","currentDelay","promises","i","push","$47d4ff9957288465$var$createPromise","Promise","all","$47d4ff9957288465$var$createPromises","then","results","forEach","result","shouldResolve","$parcel$interopDefault","Notify","success","position","failure","catch","error","console","resolve","setTimeout","Math","random"],"version":3,"file":"03-promises.e0b4b728.js.map"}